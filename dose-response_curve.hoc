{load_file("nrngui.hoc")}
objref pc
pc = new ParallelContext()
{load_file("Stick.hoc")}
{load_file("ranstream.hoc")}

NCELL = 500
TSTOP = 700
proc mknet(){
    mkcells($1)
}
objref cells
proc mkcells(){local i, ncell localobj cell,nc,nil
    ncell = $1
    cells = new List()
    for(i=pc.id;i<ncell;i+=pc.nhost){
	cell = new Stick()
	cells.append(cell)
	
	//Fukuda model
	cell.insertFukuda()
	cell.setType(1)
	
	cell.soma{
	    //tau_w_GPeA = 
	    //tau_X_GPeA = 
	    //a_m_GPeA = 0.065
	    a_m_GPeA = 0.048
	    //a_W_GPeA = 0.055
	    a_W_GPeA = 0.060
	    //lambda_GPeA = 0.05
	}


	/*
	//MsLN
	cell.insertLNlla3()
	cell.setType(4)
	*/
	/*
	//Hodgkin-Huxley model
	cell.insertHH()
	*/
	
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
    }
}

mknet(NCELL)

proc mkStim(){local i, ncell
    MAX = 3000
    Interval = 300
    for i = 0, cells.count -1 {
	cells.object(i).imax = MAX * (pc.nhost*i + pc.id) / NCELL * 60
	print cells.object(i).imax
	cells.object(i).setIntermitStim_gaus(30,cells.object(i).imax,Interval,0,-1,0.00)
    }
}
mkStim()
proc setSpikeRecord(){local i
    for i = 0, cells.count -1{
	cells.object(i).setSpikeRecord()
    }
}
setSpikeRecord()
proc setVoltageRecord(){local i
    for i = 0, cells.count -1{
	cells.object(i).setVoltageRecord()
    }
}
setVoltageRecord()

pc.barrier()
tstop = TSTOP
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

proc printSpikeRecord(){local i
    for i = 0, cells.count -1{
	cells.object(i).printSpikeRecord2(pc.id,i, Interval,TSTOP,0,0)
    }
}
proc printVoltageRecord(){
    for i = 0, cells.count -1{
	cells.object(i).printVoltageRecord3(pc.id,i)
    }
}
printVoltageRecord()


printSpikeRecord()

{pc.runworker()}
{pc.done()}
quit()