TITLE Belmabrouk et al. 2011 LN
:hh.mod is changed based on Belmanbrouk et al. 2011
:Na, K, Ca, AHP
:Manduca sexta Local interneuron
UNITS {
(mA) = (milliamp)
(mV) = (millivolt)
(S) = (siemens)
(molar) = (1/liter)
(mM) = (millimolar)
}
? interface
NEURON {
SUFFIX MsLN
USEION na READ ena WRITE ina
USEION k READ ek WRITE ik
:By park
USEION ca READ eca,cai,ica WRITE ica,cai :Read what ??
NONSPECIFIC_CURRENT il
RANGE gnabar, gkbar, gl, el, gna, gk
:By park
RANGE gcabar, gahpbar, eahp
RANGE eca, iahp, icad, qo
GLOBAL minf, hinf, ninf, mtau, htau, ntau
:THREADSAFE : assigned GLOBALs will be per thread
}
PARAMETER {
gnabar = 0.190 (S/cm2)
gkbar = 0.060 (S/cm2)
gl = .0001 (S/cm2)
gca = 0.005 (S/cm2)
gahp = 0.004 (S/cm2)
<0,1e9>
<0,1e9>
<0,1e9>
eahp = −140 (mV)
el = −67 (mV)
ctau = 0.0000125 (1/ms)
cai_inf = 0.00024 (mM)
}
STATE {
m h n
cai (mM) <1e−10>
}
ASSIGNED {
v (mV)
celsius (degC)
ena (mV)
ek (mV)
eca (mV)
gna (S/cm2)
gk (S/cm2)
ina (mA/cm2)
ik (mA/cm2)
il (mA/cm2)
minf hinf ninf
mtau (ms) htau (ms) ntau (ms)
iahp (mA/cm2)
icad (mA/cm2)
ica (mA/cm2)
s_inf
q
channel_flow (mM/ms)
}
? currents
BREAKPOINT {
SOLVE states METHOD cnexp
gna = gnabar*m*m*m*h
ina = gna*(v − ena)
gk = gkbar*n*n*n*n
ik = gk*(v − ek)
il = gl*(v − el)
:By park
q = cai/(30+cai)
iahp = gahp*q*(v−eahp)
icad = gca*s_inf*(v−eca)
ica = icad
ik = ik + iahp
:
ica = icad
:
ica = iahp
}
INITIAL {
rates(v)
m = minf
h = hinf
n = ninf
cai = cai_inf
}
? states
DERIVATIVE states {
rates(v)
m’ = (minf−m)/mtau
h’ = (hinf−h)/htau
n’ = (ninf−n)/ntau
channel_flow = −0.002 * icad
cai’ = channel_flow − ctau * (cai − cai_inf)
}
:LOCAL q10
? rates
PROCEDURE rates(v(mV)) { :Computes rate and other constants at current v.
:Call once from HOC to initialize inf at resting v.
LOCAL alpha, beta, sum, q10
TABLE minf, mtau, hinf, htau, ninf, ntau DEPEND celsius FROM −100
TO 100 WITH 200
UNITSOFF
q10 = 3^((celsius − 6.3)/10)
:"m" sodium activation system
alpha = 0.32 * vtrap((v+54),4)
beta = 0.28 * vtrap2((v+27),5)
sum = alpha + beta
mtau = 1/sum
minf = alpha/sum
:"n" potassium activation system
alpha = 0.032 * vtrap((v+52),5)
beta = 0.5 * exp(−(v+57)/40)
sum = alpha + beta
ntau = 1/sum
ninf = alpha/sum
:"h" sodium inactivation system
alpha = 0.128*exp(−(v+50)/18)
beta = 4/(1+exp(−(v+27)/5))
sum = alpha + beta
htau = 1/sum
hinf = alpha/sum
s_inf = 1/(1+exp(−(v+25)/5))
}
COMMENT
:q10 = 3^((celsius − 6.3)/10)
:"m" sodium activation system
alpha = 0.32 * (v+54)/(1−exp(−(v+54)/4))
beta = 0.28 * (v+27)/(exp((v+27)/5)−1)
sum = alpha + beta
mtau = 1/sum
minf = alpha/sum
:"n" potassium activation system
alpha = 0.032*(v+52)/(1−exp(−(v+52)/5))
beta = 0.5*exp(−(v+57)/40)
sum = alpha + beta
ntau = 1/sum
ninf = alpha/sum
:"h" sodium inactivation system
alpha = 0.128*exp(−(v+50)/18)
beta = 4/(1+exp(−(v+27)/5))
sum = alpha + beta
htau = 1/sum
hinf = alpha/sum
ENDCOMMENT
FUNCTION vtrap(x,y) { :Traps for 0 in denominator of rate eqns.
if (fabs(x/y) < 1e−6) {
vtrap = y/(1 − x/y/2)
}else{
vtrap = x/(1−exp(−x/y))
}
}
FUNCTION vtrap2(x,y) { :Traps for 0 in denominator of rate eqns.
if (fabs(x/y) < 1e−6) {
vtrap2 = y/(1 + x/y/2)
}else{
vtrap2 = x/(exp(x/y) − 1)
}
}
UNITSON
