load_file("nrngui.hoc")
load_file("Stick.hoc")
/*
nrnpython("import random")
objref py
py = new PythonObject()
nrnpython("a = random.randint(0,10000)")
print py.a
*/

objref cell[5]
cell[0] = new Stick()
/*
cell[1] = new Stick()
cell[2] = new Stick()
cell[3] = new Stick()
cell[4] = new Stick()
*/
objref rnd
rnd = new Random()
rnd.uniform(0,20)

//cell[0].insertLNlla3()

cell[0].soma{
    insert MsLNdebug
    ena = 50
    ek  = -100
    el_MsLNdebug = -67
    insert IAHP2debug
    eahp_IAHP2debug = -140
    insert caddebug
    ctau_caddebug = 0.0000125
    insert ICA
    eca = 120
}
//cell[0].setStim(rnd.repick(),100)
cell[0].setIntermitStim_gaus(0,15000,300,15000,-1,0,0)
cell[0].setCurrentRecord1()
cell[0].setVoltageRecord()

//cell[1].insertLNlla3()
//cell[1].insertHH()
//cell[1].insertFukuda()
/*
cell[1].soma{
    diam = 300
}*/
/*
objref noise
cell[1].soma{
    noise = new GammaNoise(0.5)
    noise.del = 0
    noise.dur = 1000
    noise.forseed = 10
}
*/

/*
//cell[1].setIntermitStim_gaus(0,15000,300,17000,-1)
//cell[1].setIntermitStim1(10,35000,300,17000,10)
cell[1].setCurrentRecord1()
cell[1].setVoltageRecord()


//cell[2].insertHH()
//cell[2].insertFukuda()
cell[2].insertLNlla3()
//cell[2].setIntermitStim_withNoise(10,35000,300,40000,100)
//cell[2].setIntermitStim_gaus(0,15000,300,40000,100)
//cell[2].setIntermitStim1(10,35000,300,40000,100)
cell[2].setCurrentRecord1()
cell[2].setVoltageRecord()

//cell[3].insertFukuda()
cell[3].insertLNlla3()
//cell[3].insertHH()
//cell[3].setIntermitStim_withNoise(rnd.repick(),15000,300,20000,100)
//cell[3].setIntermitStim_gaus(0,15000,300,20000,-1)
//cell[3].setIntermitStim1(rnd.repick(),15000,300,20000,100)
cell[3].setCurrentRecord1()
cell[3].setVoltageRecord()

//cell[4].insertFukuda()
cell[4].insertLNlla3()
//cell[4].setStim(rnd.repick(),4000)
//cell[4].setIntermitStim1(0,15000,300,20000,-1)
cell[4].setType(1)
cell[4].setCurrentRecord1()
cell[4].setVoltageRecord()
*/
/*
objref gabalist, gaba1, gaba2
gabalist = new List()
gaba1 = cell[4].setGABAlla()
gabalist.append(gaba1)
setpointer gaba1.pre, cell[1].soma.v(0.5)

gaba2 = cell[4].setGABAlla()
gabalist.append(gaba2)
setpointer gaba2.pre, cell[2].soma.v(0.5)

cell[4].setGABACurrentRecord()
*/
tstop = 50
dt = 0.01
/*
fadvance()

cell[0].soma{
    psection()
}

cell[3].soma{
    psection()
}
*/
MODE = 1
if(MODE == 1){
    run()
            
    cell[0].printVoltageRecord(0)
    /*    
    cell[1].printVoltageRecord(1)
    cell[2].printVoltageRecord(2)
    cell[3].printVoltageRecord(3)
    cell[4].printVoltageRecord(4)
    */  
/*
    cell[1].printCurrentRecord1(1)
    cell[2].printCurrentRecord1(2)
    cell[3].printCurrentRecord1(3)
    cell[4].printCurrentRecord1(4)
*/
    cell[0].printCurrentRecord1(0)
//    cell[4].printGABACurrentRecord(4)
}else if(MODE == 2){
    tstop = 20
    while(t < tstop){
	//print t, cell[i].soma.v(0.5), cell[j].soma.v(0.5)
	
	i = 0
	j = 2
	/*
	if(cell[i].soma.ina != cell[j].soma.ina){
	    //print cell[i].soma.ik, cell[j].soma.ik,cell[i].soma.il_MsLN, cell[j].soma.il_MsLN
	    //print cell[i].soma.iahp_MsLN, cell[j].soma.iahp_MsLN,cell[i].soma.icad_MsLN, cell[j].soma.icad_MsLN
	    //	    print cell[i].soma.q_MsLN, cell[j].soma.q_MsLN
	    
	    //print cell[i].soma.cai, cell[j].soma.cai

	    print "NA ",t, cell[i].soma.ina, cell[j].soma.ina, cell[i].soma.gna_MsLN, cell[j].soma.gna_MsLN
	    //print cell[i].soma.h_MsLN, cell[j].soma.h_MsLN, cell[i].soma.m_MsLN, cell[j].soma.m_MsLN
	    //print cell[i].soma.n_MsLN, cell[j].soma.n_MsLN,cell[i].soma.s_inf_MsLN, cell[j].soma.s_inf_MsLN
	    print cell[i].soma.ha_MsLN, cell[j].soma.ha_MsLN, cell[i].soma.hb_MsLN, cell[j].soma.hb_MsLN
	    print cell[i].soma.na_MsLN, cell[j].soma.na_MsLN, cell[i].soma.nb_MsLN, cell[j].soma.nb_MsLN
	    print cell[i].soma.ma_MsLN, cell[j].soma.ma_MsLN, cell[i].soma.mb_MsLN, cell[j].soma.mb_MsLN
	    
	}
	*/
	/*
	print t
	cell[i].soma{
	    print eca, ena, ek, el_MsLN, eahp_MsLN
	    print ik, il_MsLN, iahp_MsLN, icad_MsLN, m_MsLN,n_MsLN,h_MsLN
	    //print minf_MsLN, ninf_MsLN, hinf_MsLN, mtau_MsLN, ntau_MsLN, htau_MsLN
	    //print ma_MsLN, mb_MsLN, na_MsLN, nb_MsLN, ha_MsLN, hb_MsLN, vv_MsLN
	}
	cell[j].soma{
	    print eca, ena, ek, el_MsLN, eahp_MsLN
	    print ik, il_MsLN, iahp_MsLN, icad_MsLN, m_MsLN,n_MsLN,h_MsLN
	    //print minf_MsLN, ninf_MsLN, hinf_MsLN, mtau_MsLN, ntau_MsLN, htau_MsLN
	    //print ma_MsLN, mb_MsLN, na_MsLN, nb_MsLN, ha_MsLN, hb_MsLN, vv_MsLN
	}
	*/
	/*

	if(cell[0].soma.ik != cell[2].soma.ik){
	    print "K ", t, cell[0].soma.ik, cell[2].soma.ik
	}
	*/
	//print t, cell[1].st1.j, cell[1].st1.cnt,cell[1].st1.k,cell[1].st1.flg, cell[1].st1.interval * cell[1].st1.k
	//print cell[1].st1.temp
	access cell[1].soma
	//printf("%e ", noise.amp)
	//printf("%e %d %e\n",noise.seed, noise.forseed, noise.timer)
	fadvance()
    }

}
