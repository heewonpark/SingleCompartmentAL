{load_file("nrngui.hoc")}
objref pc
pc = new ParallelContext()
{load_file("Stick.hoc")}
{load_file("ranstream.hoc")}

/*
nBALPN = 14   // Number of BAL-PNs
nC15PN = 14   // Number of C15-PNs
nMULTIPN = 13 // Number of multiglomerular PNs
nLNa = 86     // Number of LN-lla
nLNb = 68     // Number of LN-llb
*/

nBALPN = 5   // Number of BAL-PNs
nC15PN = 0   // Number of C15-PNs
nMULTIPN = 0 // Number of multiglomerular PNs
nLNa = 35     // Number of LN-lla
nLNb = 0     // Number of LN-llb

NCELL = nBALPN + nC15PN + nMULTIPN + nLNa + nLNb
// NCELL : number of whole cells

TSTOP = 6000
print "NCELL ", NCELL


objref cells, nclist
objref ranlist
proc mknet(){
    print "mkcells"
    mkcells($1)
    print "connectcells"
    //connectcells_byNC() // NC means netcon
    //connectcells_withGABA()
    connectcells_withgaba()
}

proc mkcells(){local i,ncell localobj cell, nc, nil
    ncell = $1
    cells = new List()
    
    for(i=pc.id; i<ncell; i+=pc.nhost){
	cell = new Stick()
	cells.append(cell)
	if(i < nBALPN + nC15PN + nMULTIPN){
	    cell.insertFukuda()
	    if(i<nBALPN){
		cell.setType(1)
		cell.setExp2Syn(-75)
		print cell.type
	    }else if(i>=nBALPN && i<nBALPN+nC15PN){
		cell.setType(2)
		cell.setExp2Syn(-75)
		print cell.type
	    }else{
		cell.setType(3)
		cell.setExp2Syn(-75)
		print cell.type
	    }
	}else if((i>=nBALPN + nC15PN + nMULTIPN) && (i<nBALPN + nC15PN + nMULTIPN + nLNa)){
	    //cell.insertLNlla()
	    cell.insertLNlla3()
	    cell.setType(4)
	}else if((i>=nBALPN + nC15PN + nMULTIPN + nLNa) && (i < NCELL)){
	    cell.insertLNllb()
	    cell.setType(5)
	}else{
	    printf("mkcells error")
	    quit()
	}

	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
    }
}

objref rnd
proc connectcells_byNC(){local i, j, a_cnt, b_cnt localobj syn, nc 
    rnd = new Random()
    rnd.uniform(0,1)
    nclist = new List()
    print "e1"
    if(pc.id==0) printf("type\tpc.id\ttarget\tsource\n")
    for i=0, cells.count-1{
	if(pc.gid_exists(i)){
	    print cells.object(i).type
	    if(cells.object(i).type == 1 || cells.object(i).type == 2 || cells.object(i).type == 3){
		print "e2 ", cells.object(i).type, i	    
		syn = cells.object(i).synlist.object(0)
		a_cnt = 0
		b_cnt = 0
		for j=nBALPN + nC15PN + nMULTIPN, NCELL-1{
		    if((j>=nBALPN + nC15PN + nMULTIPN) && (j<nBALPN + nC15PN + nMULTIPN + nLNa)){
			if(rnd.repick()<0.5){
			    nc = pc.gid_connect(j,syn)
			    nclist.append(nc)
			    nc.delay = 1
			    nc.weight = 0.1
			    a_cnt += 1
			    printf("LNlla\t%d\t%d\t%d\n",pc.id, i, j)
			}
		    }else if((j>=nBALPN + nC15PN + nMULTIPN + nLNa) && (j < NCELL)){
			if(rnd.repick()<0.2){
			    nc = pc.gid_connect(j,syn)
			    nclist.append(nc)
			    nc.delay = 1
			    nc.weight = 0.1
			    b_cnt += 1
			    printf("LNllb\t%d\t%d\t%d\n",pc.id, i, j)
			}
		    } 
		}
		printf("a_cnt:%d\tb_cnt:%d\n",a_cnt,b_cnt)
	    }
	}
    }
}

// connect cells with GABAergic synapse, not for parallel simulation
objref gabalist
proc connectcells_withGABA(){local i,j, a_cnt, b_cnt localobj gaba
    print "connect cells with GABAergic synapse"
    gabalist = new List()
    rnd = new Random()
    rnd.uniform(0,1)
    for i=0, cells.count-1{
	print cells.object(i).type
	if(cells.object(i).type == 1 || cells.object(i).type == 2 || cells.object(i).type == 3){
	    print "e2 ", cells.object(i).type, i	    
	    a_cnt = 0
	    b_cnt = 0
	    for j=nBALPN + nC15PN + nMULTIPN, NCELL-1{
		if((j>=nBALPN + nC15PN + nMULTIPN) && (j<nBALPN + nC15PN + nMULTIPN + nLNa)){
		    if(rnd.repick()<0.5){
			gaba = cells.object(i).setGABAlla(3)
			setpointer gaba.pre, cells.object(j).soma.v(0.5)
			gabalist.append(gaba)
			a_cnt += 1
			printf("LNlla\t%d\t%d\t%d\n",pc.id, i, j)
		    }
		}else if((j>=nBALPN + nC15PN + nMULTIPN + nLNa) && (j < NCELL)){
		    if(rnd.repick()<0.2){
			gaba = cells.object(i).setGABAllb(1.5)
			setpointer gaba.pre, cells.object(j).soma.v(0.5)
			gabalist.append(gaba)
			b_cnt += 1
			printf("LNllb\t%d\t%d\t%d\n",pc.id, i, j)
		    }
		} 
	    }
	    printf("a_cnt:%d\tb_cnt:%d\n",a_cnt,b_cnt)
	}
    }
}

proc connectcells_withgaba(){local i,j, a_cnt, b_cnt localobj gaba
    print "connect cells with GABAergic synapse"
    gabalist = new List()
    rnd = new Random()
    rnd.uniform(0,1)
    print rnd.repick()
    print rnd.repick()
    print rnd.repick()
    print rnd.repick()
    print rnd.repick()

    for i=0, cells.count-1{
	print cells.object(i).type
	if(cells.object(i).type == 1 || cells.object(i).type == 2 || cells.object(i).type == 3){
	    print "e2 ", cells.object(i).type, i	    
	    a_cnt = 0
	    b_cnt = 0
	    for j=nBALPN + nC15PN + nMULTIPN, NCELL-1{
		if((j>=nBALPN + nC15PN + nMULTIPN) && (j<nBALPN + nC15PN + nMULTIPN + nLNa)){
		    if(rnd.repick()<0.5){
			gaba = cells.object(i).setgaba(2.0/nBALPN)
			setpointer gaba.pre, cells.object(j).soma.v(0.5)
			gabalist.append(gaba)
			a_cnt += 1
			printf("LNlla\t%d\t%d\t%d\n",pc.id, i, j)
		    }
		}else if((j>=nBALPN + nC15PN + nMULTIPN + nLNa) && (j < NCELL)){
		    /*
		    if(rnd.repick()<0.2){
			gaba = cells.object(i).setgaba(0.00275)
			setpointer gaba.pre, cells.object(j).soma.v(0.5)
			gabalist.append(gaba)
			b_cnt += 1
			printf("LNllb\t%d\t%d\t%d\n",pc.id, i, j)
		    }
		    */
		} 
	    }
	    printf("a_cnt:%d\tb_cnt:%d\n",a_cnt,b_cnt)
	}else if(cells.object(i).type == 4){
	    for j=nBALPN+nC15PN+nMULTIPN, NCELL-1{
		if((j>=nBALPN + nC15PN + nMULTIPN) && (j<nBALPN + nC15PN + nMULTIPN + nLNa)){
		    if(rnd.repick()<0.5){
			//gaba = cells.object(i).setgaba(1.75/nLNa)
			//gaba = cells.object(i).setgaba(0.35/nLNa)
			gaba = cells.object(i).setgaba(0.3/nLNa)
			setpointer gaba.pre, cells.object(j).soma.v(0.5)
			gabalist.append(gaba)
			print i, j
		    }
		}
	    }
	}
    }
}

mknet(NCELL)

cells.object(10).soma{
    print "area ", area(0.5)
}

proc mkstim(){
    for i = 0, cells.count -1 {
	if(cells.object(i).type == 1){
	    cells.object(i).setStim(50,35000)
	}else if(cells.object(i).type == 2){
	    cells.object(i).setStim(50,35000)
	}else if(cells.object(i).type == 3){
	    cells.object(i).setStim(50,35000)
	}else if(cells.object(i).type == 4){
	    cells.object(i).setStim(50,15000)
	}else if(cells.object(i).type == 5){
	    cells.object(i).setStim(50,15000)
	}
    }
}
//mkstim()
objref r_delay1, r_delay2, r_imax1, r_imax2
proc mkstim_random(){local i
    r_delay1 = new Random()
    r_delay2 = new Random()
    r_imax1 = new Random()
    r_imax2 = new Random()
    r_delay1.uniform(0,50)
    r_delay2.uniform(200,250)
    //r_imax1.uniform(3800,3800)
    r_imax1.uniform(35000,35000)
    //r_imax2.uniform(9400,9400)
    r_imax2.uniform(15000,15000)
   
    for i = 0, cells.count -1 {
	if(cells.object(i).type == 1){
	    //cells.object(i).setStim(r_delay.repick(),r_imax1.repick())
	    cells.object(i).setIntermitStim1(r_delay1.repick(),r_imax1.repick(),300, r_imax1.repick()*0.7,10)
	}else if(cells.object(i).type == 2){
	    cells.object(i).setStim(r_delay1.repick(),r_imax1.repick())
	}else if(cells.object(i).type == 3){
	    //cells.object(i).setStim(r_delay.repick(),r_imax1.repick())
	    cells.object(i).setStim(r_delay1.repick(),3700)
	}else if(cells.object(i).type == 4){
	    //cells.object(i).setStim(r_delay.repick(),r_imax2.repick())
	    cells.object(i).setIntermitStim1(r_delay2.repick(),r_imax2.repick(),300,r_imax2.repick()*1.0,10)
	    
	}else if(cells.object(i).type == 5){
	    cells.object(i).setStim(r_delay2.repick(),r_imax2.repick())
	}
    }
}

mkstim_random()
print "set Current Record1()"
cells.object(3).setCurrentRecord1()
cells.object(30).setCurrentRecord1()

objref tvec, idvec
proc spikerecord(){local i localobj nc,nil
    print "spikerecord"
    tvec = new Vector()
    idvec = new Vector()
    for i = 0, cells.count -1{
	nc = cells.object(i).connect2target(nil)
	nc.record(tvec, idvec, nc.srcgid)
    }
}
spikerecord()

proc setVoltageRecord(){local i
    for i = 0, cells.count -1{
	cells.object(i).setVoltageRecord()
    }
}
setVoltageRecord()

pc.barrier()
tstop = TSTOP
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

proc spikeout(){local i, rank
    pc.barrier()
    if(pc.id==0) printf("\ntime\t cell\n")
    for rank = 0, pc.nhost -1{
	if(rank == pc.id){
	    for i = 0, tvec.size -1{
		printf("%g\t %d\n",tvec.x[i],idvec.x[i])
	    }
	}
	pc.barrier()
    }
}
//spikeout()

proc printVoltageRecord(){
    for i = 0, cells.count -1{
	if(cells.object(i).type<4){
	    if(i%1==0){
		cells.object(i).printVoltageRecord2(pc.nhost*i+pc.id)
	    }
	}else{
	    if(i%3==0){
		cells.object(i).printVoltageRecord2(pc.nhost*i+pc.id)
	    }
	}
    }
}
printVoltageRecord()

print "print stimcurrent"
cells.object(30).printCurrentRecord1(30)
cells.object(3).printCurrentRecord1(3)

{pc.runworker()}
{pc.done()}
quit()