load_file("nrngui.hoc")
load_file("Stick.hoc")

NCELL = 9
objref cell[NCELL]
for i=0, NCELL-1{
    cell[i] = new Stick()
}

objref rnd
rnd = new Random()
rnd.uniform(0,1000)
/*
cell[0].insertLNlla2()
cell[0].setVoltageRecord()

cell[1].insertMsLN()
cell[1].setVoltageRecord()

cell[2].insertIAHP2()
cell[2].setVoltageRecord()

cell[3].insertCAD()
cell[3].setVoltageRecord()

cell[4].insertMsLN()
cell[4].insertIAHP2()
cell[4].setVoltageRecord()

cell[5].insertMsLN()
cell[5].insertCAD()
cell[5].setVoltageRecord()

cell[6].insertIAHP2()
cell[6].insertCAD()
cell[6].setVoltageRecord()


cell[0].setStim(50,200)
cell[1].setStim(50,200)
cell[2].setStim(50,200)
cell[3].setStim(50,200)
cell[4].setStim(50,200)
cell[5].setStim(50,200)
cell[6].setStim(50,200)
*/
for i= 0, NCELL-1{
    //cell[i].insertLNlla3()
    cell[i].insertHH()
    
    cell[i].soma{
	gnabar_hh = 0.190
	gkbar_hh = 0.060
	gl_hh = 0.0001
	el_hh = -67
	ena = 50
	ek = -100
    }

    cell[i].setVoltageRecord()
    cell[i].setStim(50,500*17)
}

cell[0].insertIAHP2()
cell[1].insertCAD()
cell[2].insertICA()

cell[3].insertICA()
cell[3].insertIAHP2()

cell[4].insertICA()
cell[4].insertCAD()

cell[5].insertIAHP2()
cell[5].insertCAD()

cell[6].insertIAHP2()
cell[6].insertCAD()
cell[6].insertICA()

cell[7].insertIAHP2()
cell[7].insertCAD()
cell[7].insertICA()
cell[7].soma{
    ctau_cad = 0.000125
}


for i=0, NCELL-1{
    cell[i].soma{
	psection()
    }
}

tstop = 1000
dt = 0.025
MODE = 1

if(MODE == 1){
    run()
    for i=0,NCELL-1{
	cell[i].printVoltageRecord(i)	
    }
    
}else if(MODE == 2){
    tstop = 500
    while(t < tstop){
	//print t, cell[i].soma.v(0.5), cell[j].soma.v(0.5)
	
	i = 0
	j = 2
	/*
	if(cell[i].soma.ina != cell[j].soma.ina){
	    //print cell[i].soma.ik, cell[j].soma.ik,cell[i].soma.il_MsLN, cell[j].soma.il_MsLN
	    //print cell[i].soma.iahp_MsLN, cell[j].soma.iahp_MsLN,cell[i].soma.icad_MsLN, cell[j].soma.icad_MsLN
	    //	    print cell[i].soma.q_MsLN, cell[j].soma.q_MsLN
	    
	    //print cell[i].soma.cai, cell[j].soma.cai

	    print "NA ",t, cell[i].soma.ina, cell[j].soma.ina, cell[i].soma.gna_MsLN, cell[j].soma.gna_MsLN
	    //print cell[i].soma.h_MsLN, cell[j].soma.h_MsLN, cell[i].soma.m_MsLN, cell[j].soma.m_MsLN
	    //print cell[i].soma.n_MsLN, cell[j].soma.n_MsLN,cell[i].soma.s_inf_MsLN, cell[j].soma.s_inf_MsLN
	    print cell[i].soma.ha_MsLN, cell[j].soma.ha_MsLN, cell[i].soma.hb_MsLN, cell[j].soma.hb_MsLN
	    print cell[i].soma.na_MsLN, cell[j].soma.na_MsLN, cell[i].soma.nb_MsLN, cell[j].soma.nb_MsLN
	    print cell[i].soma.ma_MsLN, cell[j].soma.ma_MsLN, cell[i].soma.mb_MsLN, cell[j].soma.mb_MsLN
	    
	}
	*/
	/*
	print t
	cell[i].soma{
	    print eca, ena, ek, el_MsLN, eahp_MsLN
	    print ik, il_MsLN, iahp_MsLN, icad_MsLN, m_MsLN,n_MsLN,h_MsLN
	    //print minf_MsLN, ninf_MsLN, hinf_MsLN, mtau_MsLN, ntau_MsLN, htau_MsLN
	    //print ma_MsLN, mb_MsLN, na_MsLN, nb_MsLN, ha_MsLN, hb_MsLN, vv_MsLN
	}
	cell[j].soma{
	    print eca, ena, ek, el_MsLN, eahp_MsLN
	    print ik, il_MsLN, iahp_MsLN, icad_MsLN, m_MsLN,n_MsLN,h_MsLN
	    //print minf_MsLN, ninf_MsLN, hinf_MsLN, mtau_MsLN, ntau_MsLN, htau_MsLN
	    //print ma_MsLN, mb_MsLN, na_MsLN, nb_MsLN, ha_MsLN, hb_MsLN, vv_MsLN
	}
	*/
	/*

	if(cell[0].soma.ik != cell[2].soma.ik){
	    print "K ", t, cell[0].soma.ik, cell[2].soma.ik
	}
	*/
	print t, cell[1].st1.j, cell[1].st1.cnt,cell[1].st1.k,cell[1].st1.flg, cell[1].st1.interval * cell[1].st1.k
	fadvance()
    }

}
